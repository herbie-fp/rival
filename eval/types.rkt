#lang racket

(provide rival-types
         rival-functions
         rival-type)

(define rival-types '(bool real))

(define rival-functions ; keys: symbol; value: (cons otype itypes)
  #hash((PI . (real))
        (E . (real))
        (INFINITY . (real))
        (NAN . (real))
        (TRUE . (bool))
        (FALSE . (bool))
        (neg . (real real))
        (acos . (real real))
        (acosh . (real real))
        (asin . (real real))
        (asinh . (real real))
        (atan . (real real))
        (atanh . (real real))
        (cbrt . (real real))
        (ceil . (real real))
        (cos . (real real))
        (cosh . (real real))
        (erf . (real real))
        (erfc . (real real))
        (exp . (real real))
        (exp2 . (real real))
        (expm1 . (real real))
        (fabs . (real real))
        (floor . (real real))
        (lgamma . (real real))
        (log . (real real))
        (log10 . (real real))
        (log1p . (real real))
        (log2 . (real real))
        (logb . (real real))
        (rint . (real real))
        (round . (real real))
        (sin . (real real))
        (sinh . (real real))
        (sqrt . (real real))
        (tan . (real real))
        (tanh . (real real))
        (tgamma . (real real))
        (trunc . (real real))
        (+ . (real real real))
        (- . (real real real))
        (* . (real real real))
        (/ . (real real real))
        (atan2 . (real real real))
        (copysign . (real real real))
        (hypot . (real real real))
        (fdim . (real real real))
        (fmin . (real real real))
        (fmax . (real real real))
        (fmod . (real real real))
        (pow . (real real real))
        (remainder . (real real real))
        (== . (bool real real))
        (!= . (bool real real))
        (<= . (bool real real))
        (>= . (bool real real))
        (< . (bool real real))
        (> . (bool real real))
        (and . (bool bool bool))
        (or . (bool bool bool))
        (not . (bool bool))
        (assert . (bool bool))
        ;; These are "shorthands" which Rival allows but are just aliases
        (neg . (real real))
        (fma . (real real real real))
        (pow2 . (real real))
        ;; These are actually polymorphic but given here with specific types in case it's useful
        (if . (real bool real real))
        (cast . (real real))
        (then . (real real))
        (error . (bool real))))

(define/contract (rival-type expr ctx)
  (-> any/c (listof (cons/c symbol? (apply or/c rival-types))) (apply or/c #f rival-types))

  (match expr
    [(or 'E 'PI) 'real]
    [(? number?) 'real]
    [(? symbol?) (dict-ref ctx expr)]
    [(list 'if c t f)
     (define ct (rival-type c ctx))
     (define tt (rival-type t ctx))
     (define ft (rival-type f ctx))
     (and (equal? ct 'bool) (equal? tt ft) tt)]
    [(list 'cast c) (rival-type c ctx)]
    [(list 'then a b)
     (define at (rival-type a ctx))
     (define bt (rival-type b ctx))
     (and at bt)]
    [(list 'error a)
     (define at (rival-type a ctx))
     (and at 'bool)]
    [(list op args ...)
     (match-define (cons otype itypes) (hash-ref rival-functions op (list #f)))
     (and (equal? (length itypes) (length args))
          (andmap equal? itypes (map (curryr rival-type ctx) args))
          otype)]
    [_ #f]))
